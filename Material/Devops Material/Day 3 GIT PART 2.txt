GIT PART 2
----------------

git conflict 
git mergetool
git rebase
git cherry-pick
git stash
git clone
git  fork
git push
git fetch
git pull request


GIT CONFLICT:
---------------------
1. CREATE A BRANCH (DEV) DO SOME CHANGES IN THE FILE AND COMMIT TO LR WITHOUT MERGING WITH MASTER BRANCH.
2. CHECKOUT TO MASTERBRANCH AND AGAIN DO SOME CHANGES IN THE FILE WHILE STAYING IN MASTER BRANCH AND COMMIT.
3. AUTOMATICALLY THERE WILL BE CONFLICT ARISING TO CHECK WHAT CONFLICT HAS HAPPENED USE:
                            [git config --global core.editor vim
                            git config --global core.compression 2
                            git config --global diff.tool vimdiff3]

4. USING THIS COMMANDS WE CAN ABLE TO SEE THE CONFLICT IN THREE DIFFERENT WINDOWS AND WE CAN SELECT WHICH COPY
WE WANT BY USING ( git mergetool )
5. THERE WILL BE THREE TYPES OF FILES ( LOCAL , BASE & REMOTE )
6. THEN WE CAN TAKE WHICH FILE WE NEEDED  ( :diffg RE ) FOR REMOTE FILE,,,,LIKEWISE (:diffg BA for base)
     (:diffg LO for local) AND FINALLY SAVE IT BY (:wqa) [ "a" --> all ]
7. THEN NOW CHECK FOR THE STATUS USING ( "git status -s"  or  "git status" )
8. AFTER KNOWING THE STATUS AND THEN COMMIT USING ( git commit -m "<commit message>" )
9. THEN CHECK THE LOGS. 

GIT REBASE:
--------------------
1. CREATE A DIRECTORY FOR REBASE AND UPLOAD A FILE WITH TWO COMMITS WHILE IN MASTER BRANCH.
2. CREATE A BRANCH (DEV).
3. CHECKOUT TO DEV BRANCH AND CREATE A NEW FILE AND DO A COMMIT.
4. CHECKOUT TO MASTER BRANCH AND DO SOME MODIFICATION IN THE PREVIOUS FILE AND DO THE COMMIT.

[NOTE: SO WE NEED BOTH THECOMMITS & CONTENTS WHICH ARE DONE IN TWO DIFFERENT BRANCHES AS WELL AS FILES]

5. TO CHECK THE COMMIT WHO HAS DONE WE CAN USE (git show <commit id>).

[NOTE: TO DO REBASE WE HAVE TO BE IN FEATURE BRANCH (i.e., dev branch) ]

6. NOW WE HAVE TO FREQUENTLY CHECK THE LOGS IN BOTH MASTER AND DEV BRANCH.
7. CHECKOUT TO DEV BRANCH AND DO GIT REBASE BY USING ( git rebase master ).

[DIFF BETWEEN MERGE & REBASE]

GIT CHERRY-PICK:
---------------------------

1. CREATE A DIRECTORY FOR CHERRY-PICK AND CREATE A FILE ADD & COMMIT THE FILE.
2. CREATE A DEV BRANCH DO SOME CHANGES IN FILE AND COMMIT IT AND CHECK LOG.

[USE CASE SCENARIO: THE COMMIT I MADE IN DEV BRANCH IS THE COMMIT TO BE DONE IN MASTER BUT MISTAKENLY 
 IF HAVE DONE IT IN DEV WE CAN GO WITH CHERRY PICK]

3. CHECKOUT TO MASTER BRANCH CHECK FOR LOG AND IF WE WANT TO EXECUTE CHERRY-PICK COPY THE COMMIT ID
    MADE IN DEV BRANCH AND USE ( git cherry-pick <commit id> )

[DIFFERENCE BETWEEN CHERRY-PICK & MERGE]

GIT CLONE:
-----------------

AFTER DOING GIT FORK AND IF WE WANT TO OUR CODE TO LR WE CAN GO WITH GIT CLONE.

1. CREATE A DIRECTORY FOR GIT CLONE AND USE ( git clone <url of the repository which we have forked from other account> )
    [ THE ABOVE SPECIFIED CLONE IS HTTPS CLONE]

    